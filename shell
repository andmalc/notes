Tasks {{{1

Find files and take action on each
	Better to use find cmd piped to xargs vs find --name --print bc xargs can be used with any command that generates file path args
	https://stackoverflow.com/questions/18302856/removing-files-interactively-with-find-and-xargs/42119953#42119953
	

Line editing {{{1

^l	clear screen

Notation:
	^k = \C=k = control key + k
	M-k = Meta (usually Alt) key + k
	ek = Escape + k

Line Editor Key Bindings
	Emacs mode bindings
		
	char
		^f/^b	move one char forward/back
		^d	delete char to right (also: list completions, log out)
		^h 	delete character to left
	
	word
		M-f	move word forward
		M-b	move word back
		M-BS	kill last word | delete word to left
		^w		kill last path component
		^-DEL	delete word to right (not in Fish)
		M-d		delete word to right


	line
		^a	beginning of line
		^e	end of line
		^u	kill line left
		^k  kill line to right
		^y	yank back previous kill

	history
		^r	search past history
			repeat for additional matches





Shell types {{{1

Login shell
    force: su - andmalc
    test: echo $0 - if result is -<shell name> is login

interactive, login
    login at text console, SSH, or with su -
non-interactive login 
    is rare
    Only if window manager reads /etc/profile or .profile
interactive, non-login
    start a shell in terminal or start a shell inside another
    rc config files are read
non-interactive, non-login
    common
    when programs run another with a script
    .env config files read

Graphical login: 
    does not create a login shell
    controlled by session or window manager

Config files {{{1

/etc/security/pam_env.conf
/etc/profile
~/.pam_environment (deprecated)
	
	shell script read by Bourne compat login shells
	exports PATH, USER, & other vars
	format: VARIABLE [DEFAULT=value] [OVERRIDE=value]
	e.g. XDG_CONFIG_HOME   DEFAULT=@{HOME}/.config

/etc/environment
	read by pam_env module
	is shell agnostic so not scripting or globbing
	var format var=value

~/.config/environment.d/*.conf
	systemd user env vars
	var format var=value

Processes {{{1

Running Processes
	Pipes always between programs. Only works with programs which expect
	standard input (e.g. not vi).  
	
	Can type in with pipe character at line end:
		echo thing is a word |
		sed 's/word/wordzzz/'

Job Control {{{2

	%n	refer to job by name or number
	%-	previous job
	%+	current job (in jobs list)
	&	Run command in background, don't wait for it to complete

	^c  Interrupt job
	^z  Suspend job

	EOF marker 
		C-D on unix
		C-Z on Windows.  
		In Python interpreter, this causes an exit. C-C is cancel input.

	bg <cmd>  Resume suspended job in background subshell (zsh only?)

	kill -<signal # or name> PID or %job#
	pkill -signal <job name>
	pgrep <job name>
		get PID by name
		-f search on whole command line
		-l list program name

	Signal Names - most apps can trap first 3, KILL will always work
	INT     Interrupt (^C) - foreground jobs only
	QUIT    = ^\
	TERM    Default signal
	KILL
	USR1	graceful restart & reread config files
	HUP		difference from USR1?

	pstree
		-h	highlight current process
		-G	solid lines
		-l	display long lines
		-p	show PID's
		-u	show UID transitions


Running Commands
	sh [cmd]	Run a script without having to change its access mode

Environment
    env     show or set shell environment

    Env for a command
        prep <cmd> => PID
        cat /proc/PID/environ  | tr '\0' '\n'



Subprocesses and subshells {{{2

External commands fork a subprocess, shell built-ins do not

Subshell
Is a child process launched by a shell or script.
Is a separate instance of command processor
Commands enclosed within parentheses are run in a subshell whether direct in shell or from within a script

All but end of a chain of pipes run in subshells.
code inside a '()' or `cmd`, including substitutions: [$=<>](cmd)

Backgrounded or suspended/resumed processes 

In subshell - does not affect main shell:
(cd /usr; ls) > file

cmd_output=$(COMMANDS)

(ls)    #return value 1 or 0
$(ls)   #returns list of files

Examples of using return value
# 
if grep someuser /etc/passwd ; then
    # do something
fi

# pipe in subshell
if ( w | grep someuser | grep sqlplus ) ; then
    # someuser is logged in and running sqlplus
fi

Variables {{{1

Variables
	Exporting
		provides copy of shell var to child process environment, not current environment
		not necessary for shell builts-ins, e.g. not necessary to export CDPATH as cd is a built-in

Scope
	Local: within the function, block of code, or subshell within which it is defined
	Global: entire script in which var is defined

Environment vs. Shell
	Environment vars
		control the behavior of programs and libraries
		normally auto imported by shell, e.g. HOME env var is available in shell as $HOME and is present in the environments of commands

	Example
		Env var: $HOME
		Shell var: ~
		$HOME works in a cmd alias but tilda doesn't

Showing vars
	echo var		shows shell vars
	printenv var	shows environment vars

Modify command env
	env var=value cmd

assignment - no spaces before or after =
    a=1 

delimit variable name with curly braces {}

Sourcing a file adds its variables to current

Command substitution {{{3

type of subshell
output of a command replaces the command itself
creates child process whose standard output is piped back into shell
    $(cmd)
    `cmd` - obsolete format

$(<file)
	outputs lines in file

    vi $(fgrep -l malloc *.c)

Misc {{{1

Xargs
	converts standard ouput of a command to argument of another.
	For commands that can't use standard input as an arg 
	For interactive commands use -o (--open-tty) arg

	grep -l <pat> | xargs -o rm -i

Move files except for <pat>
	ls | grep -v <pat> | xargs mv -t @

Command Args {{{1

Next arg is a file name  "--" and not a differnt type of arg
    git checkout <commit> -- <filename>

xargs 
    takes a newline separated list and maps the list to a command
    under zsh use zargs
        autoload -U zargs
        zargs **/*~ -- rm

Semicolon - command delimiter 

Braces, Parentheses, Brackets {{{1
Parentheses {{{2

Executes contents in subshell

Other {{{3

Arithmetic expressions (( expr or statement ))
    $ not required for variable values

Grouping expressions within conditional expressions

Braces {{{2

List or sequence expansion
    {1,2,3} {a-z}

Variable expansion  
    STR="hello"
    STR2="${STR} world"

Brackets [] {{{2
Expands text as output from command

Quoting {{{1

Quotes prevent shell from evaluating line before command

double quoted string is evaluated for shell variables or backslash escaping.

""xxx"	weak quotes 
        permits expansion of $variables and backslashed control chars like \t for tab

'xxx'	strong quotes 
        no expansion or metacharacters


\       At end of line - special case: removes new line char.  command - executed before rest of line.

Never quote a glob or regular expression
    for x in "~/*"; do done
      # This loop will run once with $x set to "~/*" rather than once for every
      # file and directory under $HOME, as was intended




Completion & Expansion {{{1

	${VAR}		Value of a shell variable name - curly brackets just used for clarity.


Shell Wildcards
	*	zero or more characters
	?	any one character
	~+	current working directory
	~-	last working directory

	[ab]	a or b
	[a-b]	from a to b, inclusive

	Note matched: Initial '.' in filename is not matched by wildcards
        e.g.    ls .*rc

brace expansion
	used to generate filenames
		cp filename{,-old}
		cp filename{-old,}
		cp filename{-v1,-v2}
		touch a{1,2,3}b

Completion vs. expansion: expansion of variables, filenames (via globbing), & history done first or after a <Tab>

C-d 	List possible completions
<pat>M-p  Recall last command beginning with pat
cmd <pat>M-/ Recall last word beginning with pat.  M-/ again to get next match (good for completing long words like paths, zsh only)
C-r<pat> Interactive history word search
C-xu    Undo last completion




Rename files
	rename command

	or
		for file in <pat>; do
			mv $file ${<pat>}
		done
	${<pat>} is a shell variable alteration/substitution/expansion  pattern
	e.g.
		echo ${foo#*.} removes file name extention from $foo

Conditional Expressions {{{1

[[ <EXPRESSION> ]]

operators:
    group expressions to set precedence     ()  
    true if both expns are true             &&  
    	0 length string
        if test -z "$Var"
    -e  file exists
    -f	is regular file
    -n	string is non-empty/non-null

Bash & Zsh test {{{2

[[ ]] for strings
(( )) for numeric

Is a command so requires semi-colon delimiter if followed on same line e.g. in if statement

http://mywiki.wooledge.org/BashFAQ/031
compatible with above operators

advantages vs. test command
    Use familiar ==, >=, and <= operators
    Check a string against a regular expression with =~
    Check a string against a glob with ==
    Less strict about quoting and escaping
        [[ $name = xx ]] #works even if $name contains whitespace

string comparisons
    <word> = <pat> #http://wiki.bash-hackers.org/syntax/pattern
    operators: =, ==, !=, =^ (regex match)
    < >     before/after -  string collation order

Operator precedence (highest â‡’ lowest):
    ( <EXPRESSION> )
    ! <EXPRESSION>
    <EXPRESSION1> && <EXPRESSION2>
    conditional evaluation with && and ||



Looping {{{1


for file in <pat>; do
    mv $file ${<pat>}
done

For Loop
    for x in y y y
    do
    ...
    done


If statement {{{1

https://robots.thoughtbot.com/the-unix-shells-humble-if
http://mywiki.wooledge.org/BashGuide

With Bash/Zsh test command

    if [[condition]]; then
      expressions
    elif condition; then  # optionally
      expressions
    else                 # optionally
      expressions
    fi

    if [[condition]]; then echo "test stuff" ; fi


Conditional execution
    || OR - 2nd command executes only if 1st fails
    &&  AND


command
	if returns 0 is true, else is false
	if pipeline, uses exit status of last command	
	! before inverts

Command History {{{1

history [n]	Show n lines of history
c	clear contents of current list
w	write current list to history file

Format:
Event Designator:[Word Designator]:[Modifier]

C-p/n   recall previous/next command

Referring to previous commands and args
	Referring to commands by sequence
	!	start character for event designator	
	!!	previous command
	!-2	2 commands previous
	!n	history event #n

	Referring to commands by string contents
	!str	Refer to most recent cmd starting with str.
	!?str?	Refer to most recent cmd containing str.
	
	Referring to args by string contents
	!?str?% Most recent arg containing str.
	!$      Last arg of previous cmd

	Append args
	!!str   Most recent command + str
	!(s1)s2 Append s2 to most recent command starting with s1
	!N str  Append arg str to command #N

Modifiers:
	p - print event, don't execute
		!497:p
		<edit previous>
		!! to execute
	[g]s/old/new	(global) substitution
	^str^str2^	Substitute str2 for str in last line

fc command
	no args	edit last command in vi
	#		edit history #
	-l      list output on std
	-n      don't show line #s

	-l # #	list commands # through #
	-l -n	list last n commands (default 10)
	-l s	list last command beginning with s
	-ln n > file	save cmd# to file
	-e vi n	edit in vi command n
	-s [pat=rep] [cmd] reexecute cmd after substitutions

M-.     insert last arg at insertion point





Functions {{{1

Define:
 function fname()  #'function' is optional
 { 
     statements; 
 }  

Execute:
    fname arg1 arg2

Arguments: 
    $0 = script name
    $1 $2 =  arg1, arg2
    $@ = all args


Bash
	Return value of last command	$?
	Show type of shell $0

Control Characters {{{1

man console_codes
interpreted by console driver and discarded before printing
^[      start an escape sequence
^X      interrupt escape sequence

ECMA-48 SGR sequence ESC [ parameters m sets display attributes
	echo -e "\e[1;31m This is red text \e[0m"
